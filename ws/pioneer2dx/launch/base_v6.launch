<?xml version="1.0" ?>
<launch>
	<arg name="world_name" default="$(find campo)/worlds/dynamic_world2.world"/>
	<arg name="meshlocation" default="$(env PWD)"/>		
	<arg name="model" default="$(find pioneer2dx)/models/model.xacro"/>
	<arg name="gui" default="false" />

        <!--<node name="joint_state_publisher_2" pkg="joint_state_publisher"
        type="joint_state_publisher" /> -->
	<!-- Lo nuevo -->	

	<!-- these are the arguments you can pass this launch file, for example paused:=true -->
	<arg name="paused" default="false"/>
	<arg name="use_sim_time" default="true"/>
	<arg name="headless" default="false"/>
	<arg name="debug" default="true"/>

	<!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
	<include file="$(find gazebo_ros)/launch/empty_world.launch">
			<!--<include file="$(arg meshlocation)/test_world.sdf">-->
			<arg name="world_name" value="$(arg world_name)"/>
			<arg name="debug" value="$(arg debug)" />
			<arg name="gui" value="$(arg gui)" />
			<arg name="paused" value="$(arg paused)"/>
			<arg name="use_sim_time" value="$(arg use_sim_time)"/>
			<arg name="headless" value="$(arg headless)"/>
			<arg name="extra_gazebo_args" value="--lockstep"/>
				<!-- Ver:http://gazebosim.org/tutorials?tut=lockstep_physics_sensors&cat=sensors -->
	</include>
			<!--Necesario para evitar conflictos con la odometria del controlador -->
            <!--<node pkg="tf" type="static_transform_publisher"   name="link1_broadcaster" args="0 0 0 0 0 0 /world /odom 100" />-->
		<rosparam file="$(find pioneer2dx)/config/pid_wheels.yaml" command="load"/>
			<!--<rosparam param="use_sim_time" subst_value="true" />-->
						<!--<node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="mobile_base_controller"/>-->


	<param name="robot_description" command="$(find xacro)/xacro $(arg model)" />


	<include file="$(find pioneer2dx)/launch/multiple_robots.launch"/>



<group ns="/bot1" clear_params="False">
	<!-- Load the URDF into the ROS Parameter Server -->
	<param name="robot_description" command="$(find xacro)/xacro $(arg model)" />
 
	<node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-urdf -model pioneer2dx -param robot_description"/>
	<!-- <param name="use_gui" value="$(arg gui)"/>-->
	<node name="robot_state_publisher_node" pkg="robot_state_publisher"    type="robot_state_publisher"/>
	<node name="joint_state_publisher_1" pkg="joint_state_publisher" type="joint_state_publisher" /> 
        <!--<remap from="/joint_states" to="/rrbot/joint_states" />-->
        <!--<node name="controller_spawner" pkg="controller_manager"
            type="spawner" respawn="false" output="screen" ns="/rrbot"
            args="left_wheel_controller right_wheel_controller
        joint_state_controller"/>-->
    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="left_wheel_controller right_wheel_controller joint_state_controller"/>

				<!--Nodo que genera los datos ground truth -->
    <node pkg="pioneer2dx" type="groundtruth.py" name="groundtruth" />
        <!-- No funciona en namespaces -->
    <!--<node pkg="topic_tools" type="drop" name="diezmado_pose_1" args="/pioneer2dx/ground_truth/pose 9 10 /pioneer2dx/ground_truth/pose_10" />
    <node pkg="topic_tools" type="drop" name="diezmado_pose_2"  args="/pioneer2dx/ground_truth/pose_10 4 5 /pioneer2dx/ground_truth/pose_decimated" />-->

</group>
</launch>

